<!DOCTYPE html>
<html lang="tr">
<head>
<meta charset="UTF-8" />
<title>Guard TD - Temel</title>
<style>
  body {
    margin: 0; background: #222; color: #eee; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    display: flex; flex-direction: column; align-items: center;
  }
  #gameCanvas {
    background: #2a5d34;
    border: 2px solid #666;
    margin-top: 20px;
    image-rendering: pixelated;
  }
</style>
</head>
<body>
<h1>Guard Tower Defense - Temel Versiyon</h1>
<canvas id="gameCanvas" width="800" height="600"></canvas>

<script>
(() => {
  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');

  const CANVAS_WIDTH = canvas.width;
  const CANVAS_HEIGHT = canvas.height;

  let gameState = 'playing';

  const pathPoints = [
    {x: 0, y: 300},
    {x: 150, y: 300},
    {x: 150, y: 150},
    {x: 450, y: 150},
    {x: 450, y: 450},
    {x: 650, y: 450},
    {x: 650, y: 300},
    {x: 800, y: 300}
  ];

  class Base {
    constructor(x, y, width, height, maxHealth) {
      this.x = x; this.y = y; this.width = width; this.height = height;
      this.maxHealth = maxHealth; this.health = maxHealth;
    }
    draw(ctx) {
      ctx.fillStyle = '#663300';
      ctx.fillRect(this.x, this.y, this.width, this.height);
      ctx.strokeStyle = '#ffee88';
      ctx.lineWidth = 3;
      ctx.strokeRect(this.x, this.y, this.width, this.height);

      const barWidth = this.width;
      const barHeight = 10;
      ctx.fillStyle = 'red';
      ctx.fillRect(this.x, this.y - 15, barWidth, barHeight);
      ctx.fillStyle = 'limegreen';
      ctx.fillRect(this.x, this.y - 15, barWidth * (this.health / this.maxHealth), barHeight);
      ctx.strokeStyle = 'black';
      ctx.lineWidth = 1;
      ctx.strokeRect(this.x, this.y - 15, barWidth, barHeight);
    }
    takeDamage(amount) {
      this.health = Math.max(this.health - amount, 0);
    }
  }

  class Enemy {
    constructor(speed, maxHealth, type = 'normal') {
      this.speed = speed; this.maxHealth = maxHealth; this.health = maxHealth;
      this.type = type;
      this.width = 28; this.height = 28;
      this.pathIndex = 0;
      this.x = pathPoints[0].x; this.y = pathPoints[0].y;
      this.alive = true;
    }
    update() {
      if (!this.alive) return;
      if (this.pathIndex >= pathPoints.length - 1) {
        this.alive = false;
        game.base.takeDamage(20);
        if (game.base.health <= 0) game.endGame();
        return;
      }
      let target = pathPoints[this.pathIndex + 1];
      let dx = target.x - this.x;
      let dy = target.y - this.y;
      let dist = Math.sqrt(dx*dx + dy*dy);
      if (dist < this.speed) {
        this.x = target.x; this.y = target.y; this.pathIndex++;
      } else {
        this.x += (dx / dist) * this.speed;
        this.y += (dy / dist) * this.speed;
      }
    }
    draw(ctx) {
      if (!this.alive) return;
      let color = '#a55';
      if (this.type === 'fast') color = '#f55';
      else if (this.type === 'armored') color = '#555';

      let pulse = Math.sin(Date.now() / 150) * 3;

      ctx.fillStyle = color;
      ctx.beginPath();
      ctx.ellipse(this.x, this.y + pulse, this.width, this.height, 0, 0, Math.PI * 2);
      ctx.fill();

      ctx.fillStyle = 'red';
      ctx.fillRect(this.x - this.width/2, this.y - this.height/2 - 12, this.width, 5);
      ctx.fillStyle = 'limegreen';
      ctx.fillRect(this.x - this.width/2, this.y - this.height/2 - 12, this.width * (this.health / this.maxHealth), 5);
      ctx.strokeStyle = 'black';
      ctx.strokeRect(this.x - this.width/2, this.y - this.height/2 - 12, this.width, 5);
    }
    takeDamage(amount) {
      this.health -= amount;
      if (this.health <= 0) {
        this.alive = false;
        game.gold += 10;
      }
    }
  }

  class Tower {
    constructor(x, y, range, damage, cooldownMax = 60) {
      this.x = x; this.y = y; this.range = range; this.damage = damage;
      this.cooldownMax = cooldownMax; this.cooldown = 0;
      this.width = 36; this.height = 36;
    }
    update() {
      if (this.cooldown > 0) {
        this.cooldown--;
        return;
      }
      let target = null;
      let minDist = Infinity;
      for (const enemy of game.enemies) {
        if (!enemy.alive) continue;
        let dx = enemy.x - this.x;
        let dy = enemy.y - this.y;
        let dist = Math.sqrt(dx*dx + dy*dy);
        if (dist <= this.range && dist < minDist) {
          target = enemy;
          minDist = dist;
        }
      }
      if (target) {
        target.takeDamage(this.damage);
        this.cooldown = this.cooldownMax;
        game.effects.push(new EffectLine(this.x, this.y, target.x, target.y));
      }
    }
    draw(ctx) {
      ctx.fillStyle = '#2288cc';
      ctx.fillRect(this.x - this.width/2, this.y - this.height/2, this.width, this.height);

      ctx.beginPath();
      ctx.strokeStyle = 'rgba(0,255,255,0.25)';
      ctx.lineWidth = 2;
      ctx.arc(this.x, this.y, this.range, 0, Math.PI * 2);
      ctx.stroke();
    }
  }

  class EffectLine {
    constructor(x1, y1, x2, y2) {
      this.x1 = x1; this.y1 = y1; this.x2 = x2; this.y2 = y2;
      this.life = 10;
    }
    update() {
      this.life--;
    }
    draw(ctx) {
      ctx.strokeStyle = `rgba(255,255,0,${this.life/10})`;
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(this.x1, this.y1);
      ctx.lineTo(this.x2, this.y2);
      ctx.stroke();
    }
  }

  const game = {
    base: new Base(760, 270, 40, 60, 200),
    enemies: [],
    towers: [],
    effects: [],
    level: 1,
    gold: 100,
    init() {
      this.enemies = [];
      this.towers = [];
      this.effects = [];
      this.level = 1;
      this.gold = 100;
      this.spawnEnemies();
      gameState = 'playing';
    },
    spawnEnemies() {
      for (let i=0; i<this.level + 2; i++) {
        const speed = 1 + this.level * 0.1;
        const health = 30 + this.level * 10;
        let type = 'normal';
        if (Math.random() < 0.2) type = 'fast';
        else if (Math.random() < 0.3) type = 'armored';
        this.enemies.push(new Enemy(speed, health, type));
      }
    },
    update() {
      if (gameState !== 'playing') return;
      this.enemies.forEach(e => e.update());
      this.towers.forEach(t => t.update());
      this.effects.forEach((eff, i) => {
        eff.update();
        if (eff.life <= 0) this.effects.splice(i,1);
      });

      this.enemies = this.enemies.filter(e => e.alive);

      if (this.enemies.length === 0) {
        this.level++;
        this.spawnEnemies();
      }
    },
    draw() {
      ctx.fillStyle = '#2a5d34';
      ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);

      ctx.strokeStyle = '#8b6b30';
      ctx.lineWidth = 24;
      ctx.lineCap = 'round';
      ctx.beginPath();
      ctx.moveTo(pathPoints[0].x, pathPoints[0].y);
      for(let i=1; i<pathPoints.length; i++) {
        ctx.lineTo(pathPoints[i].x, pathPoints[i].y);
      }
      ctx.stroke();

      this.base.draw(ctx);

      this.towers.forEach(t => t.draw(ctx));
      this.enemies.forEach(e => e.draw(ctx));
      this.effects.forEach(eff => eff.draw(ctx));

      ctx.fillStyle = '#fff';
      ctx.font = '18px Arial';
      ctx.fillText(`Altın: ${this.gold}`, 20, 30);
      ctx.fillText(`Seviye: ${this.level}`, 20, 55);
      ctx.fillText(`Karargah Sağlığı: ${this.base.health}`, 20, 80);
    },
    addTower(x, y) {
      if (this.gold < 50) return false;
      this.towers.push(new Tower(x, y, 100, 15));
      this.gold -= 50;
      return true;
    },
    endGame() {
      gameState = 'gameover';
      alert('Oyun bitti! Yeniden başlamak için sayfayı yenileyin.');
    }
  };

  game.init();

  canvas.addEventListener('click', e => {
    if (gameState !== 'playing') return;
    const rect = canvas.getBoundingClientRect();
    const mx = e.clientX - rect.left;
    const my = e.clientY - rect.top;
    game.addTower(mx, my);
  });

  function gameLoop() {
    game.update();
    game.draw();
    if (gameState !== 'gameover') requestAnimationFrame(gameLoop);
  }
  gameLoop();
})();
</script>

</body>
</html>
